#include <stdio.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>

sem_t empty, full;
int buffer;

void* producer(void* arg) {
    int item = 1;
    sem_wait(&empty);  // Wait if buffer is full
    buffer = item;
    printf("Producer produced: %d\n", item);
    sem_post(&full);   // Signal that buffer has item
    return NULL;
}

void* consumer(void* arg) {
    sem_wait(&full);   // Wait if buffer is empty
    int item = buffer;
    printf("Consumer consumed: %d\n", item);
    sem_post(&empty);  // Signal that buffer is empty
    return NULL;
}

int main() {
    pthread_t t1, t2;

    sem_init(&empty, 0, 1); // Buffer is initially empty
    sem_init(&full, 0, 0);  // No items initially

    pthread_create(&t1, NULL, producer, NULL);
    sleep(1); // Ensure producer runs first for demo
    pthread_create(&t2, NULL, consumer, NULL);

    pthread_join(t1, NULL);
    pthread_join(t2, NULL);

    sem_destroy(&empty);
    sem_destroy(&full);

    return 0;
}
