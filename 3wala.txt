// C program to illustrate
// open system call
#include<stdio.h>
#include<fcntl.h>
#include<errno.h>
extern int errno;
int main()
{ 
 // if file does not have in directory
 // then file foo.txt is created.
 int fd = open("foo.txt", O_RDONLY | O_CREAT);
 printf("fd = %d/n", fd);
 if (fd ==-1)
 {
 // print which type of error have in a code
 printf("Error Number % d\n", errno);
 // print program detail "Success or failure"
 perror("Program"); 
 }
 return 0;
}

// C program to illustrate
// read system Call
#include<stdio.h>
#include <fcntl.h>
#include<stdlib.h>
#include <unistd.h>
int main()
{
 int fd, sz;
 char *c = (char *) calloc(100, sizeof(char));
fd = open("foo.txt", O_RDONLY);
 if (fd < 0) { perror("r1"); exit(1); }
 sz = read(fd, c, 10);
 printf("called read(% d, c, 10). returned that"
 " %d bytes were read.\n", fd, sz);
 c[sz] = '\0';
 printf("Those bytes are as follows: %s", c);
}

// C program to illustrate
// write system Call
#include<stdio.h>
#include <fcntl.h>
#include<stdlib.h>
#include <unistd.h>
#include <string.h>
// I/O system Calls
int main (void)
{
 int fd[2];
 char buf1[12] = "hello world";
 char buf2[12];
 // assume foobar.txt is already created
 fd[0] = open("foobar.txt", O_RDWR); 
 fd[1] = open("foobar.txt", O_RDWR);
 write(fd[0], buf1, strlen(buf1)); 
 write(1, buf2, read(fd[1], buf2, 12));
 close(fd[0]);
 close(fd[1]);
 return 0;
}

// C program to illustrate close system Call
#include<stdio.h>
#include<stdlib.h>
#include <fcntl.h>
#include <unistd.h>
int main()
{
// assume that foo.txt is already created
int fd1 = open("foo.txt", O_RDONLY, 0);
close(fd1);
// assume that baz.tzt is already created
int fd2 = open("baz.txt", O_RDONLY, 0);
 
printf("fd2 = % d\n", fd2);
exit(0);
}

#include<stdio.h>
#include<fcntl.h>
#include<stdlib.h>
#include<unistd.h>
int main(){
    pid_t pid=getpid();
    pid_t ppid=getppid();
    
    printf("pid: %d\n",pid);
    printf("ppid: %d\n",ppid);
}


#include<stdio.h>
#include<unistd.h>
int main(){
    uid_t uid=getuid();
    uid_t euid=geteuid();
    gid_t gid=getgid();
    gid_t egid=getegid();
    
    printf("user id: %d\n",uid);
    printf("effective userid: %d\n",euid);
    printf("group id: %d\n",gid);
    printf("effective group id:Â %d\n",egid);
}