#include <stdio.h>
#define MAX 25

void allocate(char *type, int block[], int n, int process[], int m) {
    int alloc[MAX], i, j;
    for (i = 0; i < m; i++) alloc[i] = -1;

    for (i = 0; i < m; i++) {
        int idx = -1;
        for (j = 0; j < n; j++) {
            if (block[j] >= process[i]) {
                if (idx == -1 ||
                   (type[0] == 'B' && block[j] < block[idx]) ||  // Best Fit
                   (type[0] == 'W' && block[j] > block[idx]) ||  // Worst Fit
                   (type[0] == 'F'))                             // First Fit
                    idx = j;
                if (type[0] == 'F' && idx != -1) break;
            }
        }
        if (idx != -1) {
            alloc[i] = idx;
            block[idx] -= process[i];
        }
    }

    printf("\n%s Fit Allocation:\n", type);
    for (i = 0; i < m; i++)
        printf("P%d (Size %d) -> %s\n", i+1, process[i],
               alloc[i] != -1 ? (char[]){'B','l','o','c','k',' ', alloc[i]+'1', '\0'} : "Not Allocated");
}

int main() {
    int block[] = {100, 500, 200, 300, 600};
    int process[] = {212, 417, 112, 426};
    int n = sizeof(block)/sizeof(block[0]);
    int m = sizeof(process)/sizeof(process[0]);
    int b1[MAX], b2[MAX], b3[MAX];
    for (int i = 0; i < n; i++) b1[i] = b2[i] = b3[i] = block[i];

    allocate("First", b1, n, process, m);
    allocate("Best",  b2, n, process, m);
    allocate("Worst", b3, n, process, m);
    return 0;
}
