#include <stdio.h>

int findLRU(int time[], int n) {
    int min = time[0], pos = 0;
    for (int i = 1; i < n; ++i)
        if (time[i] < min) min = time[i], pos = i;
    return pos;
}

void fifo(int pages[], int n, int capacity) {
    int frames[10], front = 0, faults = 0;
    for (int i = 0; i < capacity; i++) frames[i] = -1;

    printf("\nFIFO Page Replacement:\n");
    for (int i = 0; i < n; i++) {
        int found = 0;
        for (int j = 0; j < capacity; j++)
            if (frames[j] == pages[i]) found = 1;

        if (!found) {
            frames[front] = pages[i];
            front = (front + 1) % capacity;
            faults++;
        }

        printf("Page %d -> ", pages[i]);
        for (int j = 0; j < capacity; j++)
            printf("%d ", frames[j] == -1 ? -1 : frames[j]);
        printf("\n");
    }
    printf("Total Page Faults (FIFO): %d\n", faults);
}

void lru(int pages[], int n, int capacity) {
    int frames[10], time[10], count = 0, faults = 0;
    for (int i = 0; i < capacity; i++) frames[i] = -1;

    printf("\nLRU Page Replacement:\n");
    for (int i = 0; i < n; i++) {
        int found = 0;
        for (int j = 0; j < capacity; j++) {
            if (frames[j] == pages[i]) {
                found = 1;
                count++;
                time[j] = count;
                break;
            }
        }

        if (!found) {
            int pos = -1;
            for (int j = 0; j < capacity; j++) {
                if (frames[j] == -1) {
                    pos = j;
                    break;
                }
            }
            if (pos == -1) pos = findLRU(time, capacity);

            frames[pos] = pages[i];
            count++;
            time[pos] = count;
            faults++;
        }

        printf("Page %d -> ", pages[i]);
        for (int j = 0; j < capacity; j++)
            printf("%d ", frames[j] == -1 ? -1 : frames[j]);
        printf("\n");
    }
    printf("Total Page Faults (LRU): %d\n", faults);
}

int main() {
    int pages[] = {7, 0, 1, 2, 0, 3, 0, 4, 2, 3, 0, 3};
    int n = sizeof(pages) / sizeof(pages[0]);
    int capacity = 3;

    fifo(pages, n, capacity);
    lru(pages, n, capacity);

    return 0;
}
